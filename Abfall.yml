esphome:
  name: abfall

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi: !include secrets.yaml

  # Enable fallback hotspot (captive portal) in case wifi connection fails
captive_portal:

time:
  - platform: homeassistant
    id: zeit
    on_time:
      - seconds: 30
        minutes: /5
        then:
          - if:
              condition:
                light.is_off: abfallneo
              then:
                - light.turn_on:
                    id: abfallneo
                    brightness: 100%
                    red: 1
                    blue: 1
                    green: 1
                - delay: 3s    
                - light.turn_off:
                    id: abfallneo
      - seconds: 0
        minutes: /5
        then:
          - lambda: |-
              int lz;
              int lza;
              int lzb;
              int lzg;
              int lzr;
              int colR;
              int colG;
              int colB;
              lza = (id(abfallnxta).state * 24) + (24 - id(zeit).now().hour);
              lzb = (id(abfallnxtb).state * 24) + (24 - id(zeit).now().hour);
              lzg = (id(abfallnxtg).state * 24) + (24 - id(zeit).now().hour);
              lzr = (id(abfallnxtr).state * 24) + (24 - id(zeit).now().hour);
              lz = 0;
              if (lza > 12 and lza < 37) {
                  colR = 0;
                  colG = 0;
                  colB = 1;
                  lz = lza;
              }
              if (lzb > 12 and lzb < 37) {
                  colR = 0;
                  colG = 1;
                  colB = 0;
                  lz = lzb;
              }
              if (lzg > 12 and lzg < 37) {
                  colR = 0;
                  colG = 1;
                  colB = 1;
                  lz = lzg;
              }
              if (lzr > 12 and lzr < 37) {
                  colR = 1;
                  colG = 0;
                  colB = 0;
                  lz = lzr;
              }
              if ((lza == lzb) or (lza == lzg) or (lza == lzr) or (lzb == lzg) or (lzb == lzr) or (lzg == lzr)) {
                  colR = 1;
                  colG = 1;
                  colB = 1;
              }
              if (lz > 12 and lz < 37) {
                  auto call = id(abfallneo).turn_on();
                  call.set_rgb(colR, colG, colB);
                  switch (lz) {
                    case 13 ... 18 : call.set_effect("scan");
                    case 19 ... 28 : call.set_effect("pulse");
                    case 29 ... 36 : call.set_effect("none");
                    default : call.set_effect("none");
                    call.perform();
                    id(lampe) = true;
                  }
              } else {
                  auto call = id(abfallneo).turn_off();
                  call.perform();
                  id(lampe) = false;
              }


sun:
  latitude: 51.14°
  longitude: 9.414°

globals:
  - id: lampe
    type: bool
    initial_value: 'false'


sensor:
  - platform: homeassistant
    id: abfallnxta
    internal: true
    entity_id: sensor.abfallnxta
  - platform: homeassistant
    id: abfallnxtb
    internal: true
    entity_id: sensor.abfallnxtb
  - platform: homeassistant
    id: abfallnxtg
    internal: true
    entity_id: sensor.abfallnxtg
  - platform: homeassistant
    id: abfallnxtr
    internal: true
    entity_id: sensor.abfallnxtr

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: D6
    num_leds: 8
    name: "Abfall NeoPix"
    id: abfallneo
    effects:
      - random:
      - pulse:
      - strobe:
      - flicker:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:

# i2c:
  # sda: D2
  # scl: D1

# display:
  # - platform: lcd_pcf8574
    # dimensions: 16x2
    # address: 0x27
    # lambda: |-
      # it.printf(0,0,"%f", id(abfallnxta).state);


